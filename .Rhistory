count(thall) %>%
mutate(perc = n / sum(n))
ggplot(heart_data_summary_thall, aes(x = "", y = n, fill = factor(thall))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = scales::percent(perc)), position = position_stack(vjust = 0.5)) +
labs(title = "thall (Thallium stress test)", fill = "thall") +
theme_void() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, color = "darkred", size = 15, face = "bold"),
legend.text = element_text(color = "darkblue", size = 13, face = "bold"))
heart_data_summary_output <- Heart_data %>%
count(output) %>%
mutate(perc = n / sum(n))
ggplot(heart_data_summary_output, aes(x = "", y = n, fill = factor(output))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = scales::percent(perc)), position = position_stack(vjust = 0.5)) +
labs(title = "output (diagnosis of heart disease)", fill = "output") +
theme_void() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, color = "darkred", size = 15, face = "bold"),
legend.text = element_text(color = "darkblue", size = 13, face = "bold"))
thal_zero_rows <- Heart_data %>% filter(thall == 0)
thal_zero_rows
# 0 will be filled with 2 that is most common value in thall
Heart_data$thall[Heart_data$thall == 0] <- 2
unique_thal_categories <- unique(Heart_data$thall)
unique_thal_categories
vis_miss(Heart_data)
Heart_data_long <- Heart_data %>%
gather(key = "variables", value = "value", trtbps, chol, thalachh)
ggplot(Heart_data_long, aes(x = variables, y = value, fill = factor(sex))) +
geom_boxplot() +
labs(title = "Numerical Variables - Categorical Variables (Box Plot)",
x = "Variables",
y = "Value",
fill = "Sex")
ggplot(Heart_data_long, aes(x = variables, y = value, fill = factor(cp))) +
geom_boxplot() +
labs(title = "Numerical Variables - Categorical Variables (Box Plot)",
x = "Variables",
y = "Value",
fill = "Cp")
ggplot(Heart_data_long, aes(x = variables, y = value, fill = factor(output))) +
geom_boxplot() +
labs(title = "Numerical Variables - Categorical Variables (Box Plot)",
x = "Variables",
y = "Value",
fill = "output")
Heart_data_long_2 <- Heart_data %>%
gather(key = "variables", value = "value",age)
ggplot(Heart_data_long_2, aes(x = variables, y = value, fill = factor(output))) +
geom_boxplot() +
labs(title = "Numerical Variables - Categorical Variables (Box Plot)",
x = "Variables",
y = "Value",
fill = "output")
Heart_data_long_3 <- Heart_data %>%
gather(key = "variables", value = "value",oldpeak)
ggplot(Heart_data_long_3, aes(x = variables, y = value, fill = factor(output))) +
geom_boxplot() +
labs(title = "Numerical Variables - Categorical Variables (Box Plot)",
x = "Variables",
y = "Value",
fill = "output")
cor_mat <- cor(Heart_data)
corrplot(cor_mat, method = "color",
addCoef.col = "black",
tl.cex = 0.8,
number.cex = 0.6,
cl.cex = 0.8,
tl.col = "black",
tl.srt = 45,
order = "hclust" )
Heart_data <- Heart_data %>% select(-c(chol, fbs, restecg))
Heart_data
set.seed(1234)
heart_split <- initial_split(Heart_data, prop = 0.80,
strata = output)
heart_train <- training(heart_split)
heart_test <- testing(heart_split)
Heart_data$outcome <- as.factor(Heart_data$outcome)
Heart_data$output <- as.factor(Heart_data$output)
Heart_data$output <- as.factor(Heart_data$output)
#make recipe
heart_recipe <- recipe(output ~., data=heart_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes())
prep(heart_recipe) %>%
bake(new_data = heart_train) %>%
head() %>%
kable() %>%
kable_styling(full_width = F)
heart_folds <- vfold_cv(heart_train, v = 5)
knn_spec <- nearest_neighbor(neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("classification")
# tune neighbors from 1 to 10
neighbors_grid <- grid_regular(neighbors(range = c(1, 9)), levels = 9)
knn_workflow <- workflow() %>%
add_model(knn_spec) %>%
add_recipe(heart_recipe)
knn_tune_res_class <- tune_grid(
object = knn_workflow,
resamples = heart_folds,
grid = neighbors_grid
)
# For k-NN model
knn_metrics_class <- knn_tune_res_class %>%
collect_metrics()
show_notes(knn_tune_res_class)
show_notes(.Last.tune.result)
#make recipe
heart_train$output <- as.factor(heart_train$output)
#make recipe
heart_train$output <- as.factor(heart_train$output)
heart_recipe <- recipe(output ~., data=heart_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_center(all_predictors(), -all_outcomes()) %>%
step_scale(all_predictors(), -all_outcomes())
prep(heart_recipe) %>%
bake(new_data = heart_train) %>%
head() %>%
kable() %>%
kable_styling(full_width = F)
heart_folds <- vfold_cv(heart_train, v = 5)
knn_spec <- nearest_neighbor(neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("classification")
# tune neighbors from 1 to 10
neighbors_grid <- grid_regular(neighbors(range = c(1, 9)), levels = 9)
knn_workflow <- workflow() %>%
add_model(knn_spec) %>%
add_recipe(heart_recipe)
knn_tune_res_class <- tune_grid(
object = knn_workflow,
resamples = heart_folds,
grid = neighbors_grid
)
# For k-NN model
knn_metrics_class <- knn_tune_res_class %>%
collect_metrics()
heart_test$output <- as.factor(heart_test$output)
knn_auc <- knn_metrics_class %>% filter(.metric == "roc_auc")
# Print AUC results
print(knn_auc)
# tune neighbors from 1 to 10
neighbors_grid <- grid_regular(neighbors(range = c(1, 14)), levels = 14)
knn_workflow <- workflow() %>%
add_model(knn_spec) %>%
add_recipe(heart_recipe)
knn_tune_res_class <- tune_grid(
object = knn_workflow,
resamples = heart_folds,
grid = neighbors_grid
)
# For k-NN model
knn_metrics_class <- knn_tune_res_class %>%
collect_metrics()
knn_auc <- knn_metrics_class %>% filter(.metric == "roc_auc") # Filter for AUC metric
# Print AUC results
print(knn_auc)
# tune neighbors from 1 to 10
neighbors_grid <- grid_regular(neighbors(range = c(1, 10)), levels = 10)
knn_workflow <- workflow() %>%
add_model(knn_spec) %>%
add_recipe(heart_recipe)
knn_tune_res_class <- tune_grid(
object = knn_workflow,
resamples = heart_folds,
grid = neighbors_grid
)
# For k-NN model
knn_metrics_class <- knn_tune_res_class %>%
collect_metrics()
knn_auc <- knn_metrics_class %>% filter(.metric == "roc_auc") # Filter for AUC metric
# Print AUC results
print(knn_auc)
best_neighbors_class <- select_by_one_std_err(knn_tune_res_class, desc(neighbors), metric = "roc_auc")
final_wf_knn_class <- finalize_workflow(knn_workflow_class, best_neighbors_class)
final_wf_knn_class <- finalize_workflow(knn_workflow, best_neighbors_class)
final_fit_knn_class <- fit(final_wf_knn_class, heart_train)
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(survived, .pred_Yes)
final_wf_knn_class <- finalize_workflow(knn_workflow, best_neighbors_class)
final_fit_knn_class <- fit(final_wf_knn_class, heart_train)
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(output, .pred_Yes)
final_wf_knn_class <- finalize_workflow(knn_workflow, best_neighbors_class)
final_fit_knn_class <- fit(final_wf_knn_class, heart_train)
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(output, .pred)
final_fit_knn_class
augment(final_fit_knn_class, new_data = heart_test)
augment(final_fit_knn_class, new_data = heart_test)
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(output, .pred_0)
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(output, .pred_1)
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(output, .pred_0)
log_reg <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(heart_recipe)
log_wkflow <- workflow() %>%
add_model(log_reg) %>%
add_recipe(heart_recipe)
log_fit_results <- fit(log_wkflow,heart_train)
log_fit_results
log_fit_results %>% tidy()
predict(log_fit_results, new_data = heart_train, type = "prob")
augment(log_fit_results, new_data = heart_train) %>%
conf_mat(truth = output, estimate = .pred_class)
augment(log_fit_results, new_data = heart_train) %>%
conf_mat(truth = output, estimate = .pred_class) %>%
autoplot(type = "heatmap")
augment(log_fit_results, new_data = heart_test) %>%
conf_mat(truth = output, estimate = .pred_class) %>%
autoplot(type = "heatmap")
augment(log_fit_results, new_data = heart_test) %>%
roc_curve(output, .pred_0) %>%
autoplot()
log_acc <- augment(log_fit_results, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
log_acc
log_acc_test <- augment(log_fit_results, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
log_acc_test
log_acc_train <- augment(log_fit_results, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
log_acc_train
# Specify the linear discriminant analysis model
lda_model <- discrim_linear() %>%
set_engine("MASS") %>%
set_mode("classification")
# Create the workflow with the LDA model
lda_workflow <- workflow() %>%
add_model(lda_model) %>%
add_recipe(heart_recipe)
# Fit the LDA model
lda_fit_results <- fit(lda_workflow, data = heart_train)
augment(lda_fit_results, new_data = heart_train) %>%
conf_mat(truth = output, estimate = .pred_class) %>%
autoplot(type = "heatmap")
log_acc_train <- augment(lda_fit_results, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
log_acc_train
lda_acc_train <- augment(lda_fit_results, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
lda_acc_train
lda_acc_test <- augment(lda_fit_results, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
lda_acc_test
# Specify the quadratic discriminant analysis model
qda_model <- discrim_quad() %>%
set_engine("MASS") %>%
set_mode("classification")
# Create the workflow with the QDA model
qda_workflow <- workflow() %>%
add_model(qda_model) %>%
add_recipe(heart_recipe)
qda_fit_results <- fit(qda_workflow, data = heart_train)
augment(qda_fit_results, new_data = heart_train) %>%
conf_mat(truth = output, estimate = .pred_class) %>%
autoplot(type = "heatmap")
qda_acc_train <- augment(qda_fit_results, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
qda_acc_train
qda_acc_test <- augment(qda_fit_results, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
qda_acc_test
augment(log_fit_results, new_data = heart_test) %>%
roc_auc(output, .pred_0)
knn_acc_test <- augment(final_fit_knn_class, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
knn_acc_test
knn_acc_train <- augment(final_fit_knn_class, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
knn_acc_train
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(output, .pred_class)
augment(final_fit_knn_class, new_data = heart_test) %>%
roc_auc(output, .pred_0)
log_acc_test <- augment(log_fit_results, new_data = heart_test) %>%
roc_auc(truth = output, estimate = .pred_0)
log_acc_test <- augment(log_fit_results, new_data = heart_test) %>%
roc_auc(output, estimate = .pred_0)
log_acc_test <- augment(log_fit_results, new_data = heart_test) %>%
roc_auc(output, .pred_0)
log_roc_test <- augment(log_fit_results, new_data = heart_test) %>%
roc_auc(output, .pred_0)
log_roc_test
log_roc_train <- augment(log_fit_results, new_data = heart_train) %>%
roc_auc(output, .pred_0)
log_roc_train
log_acc_train <- augment(log_fit_results, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
log_acc_train
log_acc_test <- augment(log_fit_results, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
log_acc_test
glm_model_class <- logistic_reg() %>%
set_engine("glm") %>%
set_mode("classification")
glm_workflow_class <- workflow() %>%
add_model(glm_model_class) %>%
add_recipe(heart_recipe)
en_spec_lm_class <- logistic_reg(mixture = tune(),
penalty = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
en_grid <- grid_regular(penalty(range = c(0, 1)),
mixture(range = c(0, 1)),
levels = 10)
en_workflow_lm_class <- workflow()%>%
add_model(en_spec_lm_class) %>%
add_recipe(heart_recipe)
en_tune_res_class <- tune_grid(
object = en_workflow_lm_class,
resamples = heart_folds,
grid = en_grid
)
# For elastic net logistic regression model
en_metrics_class <- en_tune_res_class %>%
collect_metrics()
# For elastic net logistic regression model
en_metrics_class <- en_tune_res_class %>%
collect_metrics()
en_auc <- en_metrics_class %>% filter(.metric == "roc_auc")
# Print AUC results
print(knn_auc)
# Print AUC results
print(en_auc)
best_en_class <- select_best(en_tune_res_class, metric = "roc_auc")
best_en_class <- select_best(en_tune_res_class, metric = "roc_auc")
en_wf_final_class <- finalize_workflow(en_workflow_lm_class, best_en_class)
# Fit the finalized workflow to the training set
final_fit_en_class <- fit(en_wf_final_class, data = heart_train)
# Evaluate the model on the testing set
final_results_en_class <- augment(final_fit_en_class, new_data = heart_test) %>%
roc_auc(output, .pred_0)
final_results_en_class
best_en_class <- select_best(en_tune_res_class, metric = "roc_auc")
en_wf_final_class <- finalize_workflow(en_workflow_lm_class, best_en_class)
# Fit the finalized workflow to the training set
final_fit_en_class <- fit(en_wf_final_class, data = heart_train)
en_acc_train <- augment(final_fit_en_class, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
en_acc_train
en_acc_train <- augment(final_fit_en_class, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
en_acc_train
en_acc_test <- augment(final_fit_en_class, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
en_acc_test
tree_spec <- decision_tree(cost_complexity = tune()) %>%
set_engine("rpart") %>%
set_mode("regression")
tree_wf <- workflow() %>%
add_model(tree_spec) %>%
add_recipe(heart_recipe)
param_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)
tune_tree <- tune_grid(
tree_wf,
resamples = heart_folds,
grid = param_grid
)
autoplot(tune_tree)
show_notes(.Last.tune.result)
tree_spec <- decision_tree(cost_complexity = tune()) %>%
set_engine("rpart") %>%
set_mode("classification")
tree_wf <- workflow() %>%
add_model(tree_spec) %>%
add_recipe(heart_recipe)
param_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)
tune_tree <- tune_grid(
tree_wf,
resamples = heart_folds,
grid = param_grid
)
autoplot(tune_tree)
best_complexity <- select_best(tune_tree)
tree_final <- finalize_workflow(tree_wf, best_complexity)
tree_final_fit <- fit(tree_final, data = heart_train)
tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
best_complexity
tree_acc_train <- augment(tree_final_fit, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
tree_acc_train
tree_acc_test <- augment(tree_final_fit, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
tree_acc_test
param_grid <- grid_regular(cost_complexity(range = c(-5, -1)), levels = 10)
tune_tree <- tune_grid(
tree_wf,
resamples = heart_folds,
grid = param_grid
)
autoplot(tune_tree)
best_complexity <- select_best(tune_tree)
tree_final <- finalize_workflow(tree_wf, best_complexity)
tree_final_fit <- fit(tree_final, data = heart_train)
best_complexity
tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
tree_acc_train <- augment(tree_final_fit, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
tree_acc_train
tree_acc_test <- augment(tree_final_fit, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
tree_acc_test
rf_class_spec <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine("ranger") %>%
set_mode("classification")
rf_class_wf <- workflow() %>%
add_model(rf_class_spec) %>%
add_recipe(heart_recipe)
rf_grid <- grid_regular(mtry(range = c(1, 10)),
trees(range = c(200, 600)),
min_n(range = c(10, 20)),
levels = 5)
rf_grid <- grid_regular(mtry(range = c(1, 10)),
trees(range = c(200, 600)),
min_n(range = c(10, 20)),
levels = 5)
rf_tune_class <- tune_grid(
rf_class_wf,
resamples = heart_folds,
grid = rf_grid
)
save(tune_class, file = "rf_tune_class.rda")
save(tune_class, file = "rf_tune_class.rda")
save(rf_tune_class, file = "rf_tune_class.rda")
load("rf_tune_class.rda")
autoplot(rf_tune_class) + theme_minimal()
best_rf_class <- select_best(rf_tune_class)
best_rf_class
final_rf_model <- finalize_workflow(rf_class_wf, best_rf_class)
final_rf_model <- fit(final_rf_model, heart_train)
rf_class_spec <- rand_forest(mtry = tune(),
trees = tune(),
min_n = tune()) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification")
rf_class_wf <- workflow() %>%
add_model(rf_class_spec) %>%
add_recipe(heart_recipe)
rf_grid <- grid_regular(mtry(range = c(1, 10)),
trees(range = c(200, 600)),
min_n(range = c(10, 20)),
levels = 5)
rf_tune_class <- tune_grid(
rf_class_wf,
resamples = heart_folds,
grid = rf_grid
)
save(rf_tune_class, file = "rf_tune_class.rda")
load("rf_tune_class.rda")
autoplot(rf_tune_class) + theme_minimal()
best_rf_class <- select_best(rf_tune_class)
best_rf_class
final_rf_model <- finalize_workflow(rf_class_wf, best_rf_class)
final_rf_model <- fit(final_rf_model, heart_train)
final_rt_model %>% extract_fit_parsnip() %>%
vip() +
theme_minimal()
final_rf_model <- fit(final_rf_model, heart_train)
final_rt_model %>% extract_fit_parsnip() %>%
vip() +
theme_minimal()
final_rf_model <- fit(final_rf_model, heart_train)
final_rt_model %>% extract_fit_parsnip() %>%
vip() +
theme_minimal()
final_rf_model %>% extract_fit_parsnip() %>%
vip() +
theme_minimal()
rf_acc_train <- augment(final_rf_model, new_data = heart_train) %>%
accuracy(truth = output, estimate = .pred_class)
rf_acc_train
rf_acc_test <- augment(final_rf_model, new_data = heart_test) %>%
accuracy(truth = output, estimate = .pred_class)
rf_acc_test
lda_roc_test
lda_roc_test <- augment(lda_fit_results, new_data = heart_test) %>%
roc_auc(output, .pred_0)
lda_roc_test
lqa_roc_test <- augment(lqa_fit_results, new_data = heart_test) %>%
roc_auc(output, .pred_0)
qda_roc_test <- augment(qda_fit_results, new_data = heart_test) %>%
roc_auc(output, .pred_0)
qda_roc_test
en_roc_test <- augment(final_fit_en_class, new_data = heart_test) %>%
roc_auc(output, .pred_0)
en_roc_test
tree_roc_test <- augment(tree_final_fit, new_data = heart_test) %>%
roc_auc(output, .pred_0)
tree_roc_test
rf_roc_test <- augment(final_rf_model, new_data = heart_test) %>%
roc_auc(output, .pred_0)
rf_roc_test
